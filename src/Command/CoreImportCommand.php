<?php
/**
 * import objects into mongodb with files created by CoreExportCommand
 */

namespace Graviton\ImportExport\Command;

use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Finder\Finder;
use Webuni\FrontMatter\FrontMatter;
use Graviton\ImportExport\Util\JsonSerializer;

/**
 * @author   List of contributors <https://github.com/libgraviton/import-export/graphs/contributors>
 * @license  https://opensource.org/licenses/MIT MIT License
 * @link     http://swisscom.ch
 */
class CoreImportCommand extends ImportCommandAbstract
{
    use CoreClientTrait;

    /**
     * @var FrontMatter
     */
    private $frontMatter;

    /**
     * @var JsonSerializer
     */
    private $serializer;

    /**
     * @var array
     */
    private $errorStack = [];

    /**
     * @param FrontMatter    $frontMatter frontmatter parser
     * @param JsonSerializer $serializer  serializer
     * @param Finder         $finder      finder
     */
    public function __construct(
        FrontMatter $frontMatter,
        JsonSerializer $serializer,
        Finder $finder
    ) {
        parent::__construct($finder);
        $this->frontMatter = $frontMatter;
        $this->serializer = $serializer;
    }

    /**
     * Configures the current command.
     *
     * @return void
     */
    protected function configure()
    {
        $this
            ->setName('graviton:core:import')
            ->setDescription('Import files from a folder or file generated by graviton:core:export into MongoDB.')
            ->addOption(
                'mongodb',
                null,
                InputOption::VALUE_REQUIRED,
                'MongoDB connection URL.'
            )
            ->addOption(
                'input-file',
                'i',
                InputOption::VALUE_REQUIRED,
                'If provided, the list of files to load will be loaded from this file, one file per line.'
            )
            ->addArgument(
                'file',
                InputArgument::IS_ARRAY,
                'Directories or files to load'
            );
    }

    /**
     * Executes the current command.
     *
     * @param Finder          $finder Finder
     * @param InputInterface  $input  User input on console
     * @param OutputInterface $output Output of the command
     *
     * @return integer
     */
    protected function doImport(Finder $finder, InputInterface $input, OutputInterface $output)
    {
        $exitCode = 0;
        foreach ($finder as $file) {
            $this->importResource($file, $input, $output);
        }

        if (!empty($this->errorStack)) {
            $this->logger->error('Errors orcurred during load!', ['stack' => $this->errorStack]);
            $exitCode = 1;
        }
        return $exitCode;
    }

    /**
     * import a single file into a collection
     *
     * @param SplFileInfo     $file   file
     * @param InputInterface  $input  User input on console
     * @param OutputInterface $output Output of the command
     *
     * @return integer
     */
    private function importResource(\SplFileInfo $file, InputInterface $input, OutputInterface $output)
    {
        $doc = $this->frontMatter->parse($file->getContents());

        try {
            $origDoc = $this->serializer->unserialize($doc->getContent());
        } catch (\Exception $e) {
            $errorMessage = "Error in <${file}>: ".$e->getMessage();
            $this->logger->error($errorMessage);
            $this->errorStack[] = $errorMessage;
            return;
        }

        if (is_null($origDoc)) {
            $errorMessage = "Could not deserialize file <${file}>";
            $this->logger->error($errorMessage);
            array_push($this->errorStack, $errorMessage);
        } else {
            try {
                $collectionName = $doc->getData()['collection'];

                if ($this->isMultipleInsert($origDoc)) {
                    $i = 1;
                    foreach ($origDoc as $doc) {
                        $this->getDatabase($input)->selectCollection($collectionName)->save($doc);
                        $thisId = '';
                        if (isset($doc['_id'])) {
                            $thisId = $doc['_id'];
                        }
                        $this->logger->info("Imported <${file}:${i}> to <${collectionName}:${thisId}>");
                        $i++;
                    }
                } else {
                    $this->getDatabase($input)->selectCollection($collectionName)->save($origDoc);
                    $thisId = '';
                    if (isset($origDoc['_id'])) {
                        $thisId = $origDoc['_id'];
                    }
                    $this->logger->info("Imported <${file}> to <${collectionName}:${thisId}>");
                }
            } catch (\Exception $e) {
                $errorMessage = "Error in <${file}>: ".$e->getMessage();
                $this->logger->error($errorMessage);
                $this->errorStack[] = $errorMessage;
            }
        }
    }

    /**
     * checks if we should insert multiple documents from one file
     *
     * @param array $docs the docs (one or many)
     *
     * @return bool true if yes, false otherwise
     */
    private function isMultipleInsert($docs)
    {
        $keys = array_keys($docs);
        if (empty($keys)) {
            return false;
        }
        return is_int($keys[0]);
    }
}
