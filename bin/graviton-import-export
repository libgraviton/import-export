#!/usr/bin/env php
<?php

if (strpos(__DIR__, 'vendor') === false) {
    require __DIR__ . '/../vendor/autoload.php';
} else {
    // assume vendor to be on include_path if installed
    require 'vendor/autoload.php';
}

use Graviton\ImportExport\Command\ImportCommand;
use Graviton\ImportExport\Command\CoreExportCommand;
use Graviton\ImportExport\Command\CoreImportCommand;
use Graviton\ImportExport\Command\CorePurgeCommand;
use Graviton\ImportExport\Command\ValidationCommand;
use Symfony\Component\Console\Application;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Yaml\Parser;
use Symfony\Component\VarDumper\Cloner\VarCloner;
use Symfony\Component\VarDumper\Dumper\CliDumper as Dumper;
use Graviton\ImportExport\Service\HttpClient;
use Webuni\FrontMatter\FrontMatter;
use Symfony\Component\Filesystem\Filesystem;
use Graviton\ImportExport\Util\JsonSerializer;

// monolog
$sentryClient = new Raven_Client(
        null,
        [
            'app_path' => __DIR__.'/../',
            'tags' => ['application' => 'import-export']
        ]
);

$monologFormatter = new \Monolog\Formatter\LineFormatter(null, 'Y-m-d H:i:sO');
$streamHandler = new \Monolog\Handler\StreamHandler('php://stdout', \Monolog\Logger::INFO);
$streamHandler->setFormatter($monologFormatter);

$logger = new \Monolog\Logger('app');
$logger->pushHandler($streamHandler);
$logger->pushHandler(new \Monolog\Handler\RavenHandler($sentryClient, \Monolog\Logger::WARNING));

$errorHandler = new Raven_ErrorHandler($sentryClient);
$errorHandler->registerExceptionHandler();
$errorHandler->registerErrorHandler();
$errorHandler->registerShutdownFunction();

$application = new Application();
$application->setCatchExceptions(false);
$application->add(
    new ImportCommand(
        $logger,
        new HttpClient(),
        new Finder(),
        new FrontMatter(),
        new Parser(),
        new VarCloner(),
        new Dumper()
    )
);

if (class_exists('\MongoClient')) {
    $application->add(
        new CoreImportCommand(
            $logger,
            new FrontMatter(),
            new JsonSerializer(),
            new Finder()
        )
    );
    $application->add(
        new CoreExportCommand(
            new Filesystem(),
            new JsonSerializer(),
            new FrontMatter()
        )
    );
    $application->add(
        new CorePurgeCommand()
    );
    $application->add(
        new ValidationCommand(
            new FrontMatter(),
            new Parser()
        )
    );
}
$application->run();
